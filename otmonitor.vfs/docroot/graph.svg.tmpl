% global track start gui graph graphdef theme timestamp span
% set now $timestamp
% set maxx [expr {min($span, $now - $start) / 5. + 25}]
% if {[info exists graph]} {
% } elseif {[info exists gui(ch2)] && $gui(ch2)} {
%     set graph $graphdef
% } else {
%     # Remove the CH2 related parts
%     set graph [dict remove $graphdef chmode2 temperature2]
% }
% # Calculate the height of the graph
% set height 18
% dict for {name dict} $graph {
%     dict update dict min min max max scale scale zoom zoom {
%         set height [expr {$height + 8 + ($max - $min) * $zoom}]
%     }
% }
% set maxx [expr {round($maxx)}]
% set show visible
% if {[dict exists $state request query legend {}]} {
%     if {[string is false -strict [dict get $state request query legend {}]]} {
%         set show hidden
%     }
% }
% # Make sure there is at least enough room for the legend.
% set width [expr {max($maxx, 220)}]
% set height [expr {round($height)}]
% set zero [expr {92 * 5}]
<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="$theme.css"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="$width" height="$height" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<title>Opentherm gateway graph</title>
<style>
svg {
  background-color: white;
}
.legend {
  opacity: 0.8;
  background: #ffffff;
  cursor: default;
  fill: white;
  stroke: white;
  visibility: $show
}
.legend text,circle {
  stroke: none;
}
</style>
<script>
// Clock difference between server and client
const skew = [clock milliseconds] - Date.now()
// Start time of the graph
var start = [expr {max($start, $now - $span) * 1000}]
var ref = performance.timeOrigin + skew - start
var span = $span
</script>
<script href="graph.js"></script>
<!-- Vertical lines -->
% set sec [expr {$now / 300 * 300}]
% set x [expr {$maxx - ($now % 300) / 5.}]
% while {$x > 25} {
%     set time [clock format $sec -format %H:%M]
%     set mark [expr {$sec / 300 % ($span / 300)}]
<polyline id="marker$mark" class="vgrid" points="$x 0 $x $height" style="stroke: #eee; fill: none;"/>
<text id="label$mark" class="time" x="$x" y="[expr {$height - 2}]" text-anchor="middle" style="fill: black; font-family: DejaVu Sans; font-size: 10px;">$time</text>
%     set x [expr {$x - 60}]
%     incr sec -300
% }
% set y 0
% dict for {group dict} $graph {
%     incr y 8
%     set legend {}
%     dict with dict {
%         set zero [expr {$y + $max * $zoom}]
<!-- Horizontal lines -->
%         for {set v $min} {$v <= $max} {incr v $scale} {
%             set i [expr {$zero - $v * $zoom}]
<polyline class="hgrid" points="25 $i $maxx $i" style="stroke: #eee; fill: none;"/>
%             set i [expr {$i + 4}]
<text x="22" y="$i" text-anchor="end" style="fill: black; font-family: DejaVu Sans; font-size: 10px;">$v</text>
%         }
<!-- Traces -->
%         dict for {name data} $line {
%             set coords {}
%             set color [dict get $data color]
%             set title [dict get $data name]
%             if {![info exists track($name)]} continue
%             foreach {ts val} $track($name) {
%                 set x [expr {max(25, $maxx - ($now - $ts) / 5.)}]
%                 set i [expr {$zero - $val * $zoom}]
%                 if {$x <= 25} {set coords {}}
%                 if {[llength $coords] == 0 && $type eq "polygon"} {
%                     if {$val} {lappend coords $x $zero}
%                 }
%                 lappend coords $x $i
%             }
%             if {[llength $coords]} {lappend coords $maxx $i}
%             if {$type eq "polygon"} {
%                 if {$i != 0} {lappend coords $maxx $zero}
%                 set fill $color
%             } else {
%                 set type polyline
%                 set fill none
%             }
<g>
<title>$title</title>
[format {<%s class="trace" id="%s" points="%s" data-zero="%g" data-zoom="%g" \
  style="stroke: %s; fill: %s;"/>} $type $name [join $coords] $zero $zoom $color $fill]
</g>
%         }
%         set v [expr {$y + 4}]
<g class="legend">
%         set h [expr {[dict size $line] * 14 - 3}]
<rect x="22" y="$y" width="180" height="$h"/>
%         if {[dict exists $dict name]} {
%             set title [dict get $dict name]
%             set color [dict get $dict color]
<circle cx="32" cy="$v" r="4" fill="$color"/>
%             incr v 4
<text x="40" y="$v" text-anchor="start" style="fill: black; font-family: DejaVu Sans; font-size: 10px;">$title</text>
%             incr v 10
%         } else {
%             dict for {name data} $line {
%                 set title [dict get $data name]
%                 set color [dict get $data color]
<circle cx="32" cy="$v" r="4" fill="$color"/>
%                 incr v 4
<text x="40" y="$v" text-anchor="start" style="fill: black; font-family: DejaVu Sans; font-size: 10px;">$title</text>
%                 incr v 10
%             }
%         }
</g>
%     }
%     incr y [expr {round(($max - $min) * $zoom)}]
% }
</svg>
